{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":81888,"databundleVersionId":8893623,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"raw","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\n\n# Load the data\ndaily_data = pd.read_csv(\"/kaggle/input/predicta-1-0-predict-the-unpredictable-part-2/daily_data.csv\")\nsubmission_template = pd.read_csv(\"/kaggle/input/predicta-1-0-predict-the-unpredictable-part-2/submission.csv\")\n\n# Display the first few rows of the data\nprint(daily_data.head())\nprint(submission_template.head())\n\n# Check for missing values\nprint(daily_data.isnull().sum())\n\n# Split the data into train and test based on missing values in condition_text\ntrain_data = daily_data[daily_data['condition_text'].notnull()]\ntest_data = daily_data[daily_data['condition_text'].isnull()]\n\n# Separate features and target variable\nX_train = train_data.drop(columns=['condition_text'])\ny_train = train_data['condition_text']\nX_test = test_data.drop(columns=['condition_text'])\n\n# Define numerical and categorical columns\nnumerical_cols = X_train.select_dtypes(include=['int64', 'float64']).columns\ncategorical_cols = X_train.select_dtypes(include=['object']).columns\n\n# Preprocessing pipelines for numerical and categorical data\nnumerical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())\n])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Combine preprocessing steps\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Preprocess the training data\nX_train_processed = preprocessor.fit_transform(X_train)\nX_test_processed = preprocessor.transform(X_test)\n\n# Define the model\nmodel = RandomForestClassifier(n_estimators=100, random_state=0)\n\n# Cross-validation to evaluate the model\ncv_scores = cross_val_score(model, X_train_processed, y_train, cv=5, scoring='accuracy')\nprint(f'Cross-validation accuracy scores: {cv_scores}')\nprint(f'Mean cross-validation accuracy: {cv_scores.mean()}')\n\n# Fit the model on the entire training data\nmodel.fit(X_train_processed, y_train)\n\n# Dictionary to store predictions\npredictions = {}\n\n# Iterate through each row in the daily data to predict or keep existing value\nfor index, row in daily_data.iterrows():\n    if pd.isna(row['condition_text']):\n        # Extract features from the row\n        features = row.drop(labels=['condition_text']).to_frame().T\n        # Preprocess the features\n        features_processed = preprocessor.transform(features)\n        # Predict the condition_text\n        predicted_condition = model.predict(features_processed)[0]\n        predictions[row['day_id']] = predicted_condition\n    else:\n        predictions[row['day_id']] = row['condition_text']\n\n# Prepare the submission file\nsubmission_template['condition_text'] = submission_template['day_id'].map(predictions)\nsubmission_template.to_csv('submission.csv', index=False)\n\nprint(\"Submission file has been saved as submission.csv\")\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T14:23:22.523648Z","iopub.execute_input":"2024-06-22T14:23:22.524988Z","iopub.status.idle":"2024-06-22T14:24:03.176223Z","shell.execute_reply.started":"2024-06-22T14:23:22.524937Z","shell.execute_reply":"2024-06-22T14:24:03.174315Z"}}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}