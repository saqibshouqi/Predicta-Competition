{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7e86bafe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T03:15:26.460751Z",
     "iopub.status.busy": "2024-06-23T03:15:26.460263Z",
     "iopub.status.idle": "2024-06-23T03:15:27.693326Z",
     "shell.execute_reply": "2024-06-23T03:15:27.692185Z"
    },
    "papermill": {
     "duration": 1.240263,
     "end_time": "2024-06-23T03:15:27.696123",
     "exception": false,
     "start_time": "2024-06-23T03:15:26.455860",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  city_id        date  avg_temp_c  min_temp_c  max_temp_c  precipitation_mm  \\\n",
      "0    C001  2014-01-01         6.6        -1.4        11.6               NaN   \n",
      "1    C001  2014-01-02         9.3         6.3        13.3               NaN   \n",
      "2    C001  2014-01-03         7.6         1.9        14.0               NaN   \n",
      "3    C001  2014-01-04         7.6         3.9        13.3               NaN   \n",
      "4    C001  2014-01-05         8.6         0.5        16.9               NaN   \n",
      "\n",
      "   snow_depth_mm  avg_wind_dir_deg  avg_wind_speed_kmh  \n",
      "0            NaN             168.0                 6.2  \n",
      "1            NaN             155.0                10.0  \n",
      "2            NaN               NaN                 5.8  \n",
      "3            NaN             291.0                11.3  \n",
      "4            NaN               NaN                 5.0  \n",
      "   submission_ID  avg_temp_c\n",
      "0              1         NaN\n",
      "1              2         NaN\n",
      "2              3         NaN\n",
      "3              4         NaN\n",
      "4              5         NaN\n",
      "   submission_ID city_id        date\n",
      "0              1    C001  2019-01-01\n",
      "1              2    C001  2019-01-02\n",
      "2              3    C001  2019-01-03\n",
      "3              4    C001  2019-01-04\n",
      "4              5    C001  2019-01-05\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the datasets\n",
    "historical_weather = pd.read_csv(\"/kaggle/input/predicta-1-0-predict-the-unpredictable/historical_weather.csv\")\n",
    "sample_submission = pd.read_csv(\"/kaggle/input/predicta-1-0-predict-the-unpredictable/sample_submission.csv\")\n",
    "submission_key = pd.read_csv(\"/kaggle/input/predicta-1-0-predict-the-unpredictable/submission_key.csv\")\n",
    "\n",
    "# Display the first few rows of each dataframe\n",
    "print(historical_weather.head())\n",
    "print(sample_submission.head())\n",
    "print(submission_key.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "71e5644e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T03:15:27.702724Z",
     "iopub.status.busy": "2024-06-23T03:15:27.702327Z",
     "iopub.status.idle": "2024-06-23T03:15:27.894616Z",
     "shell.execute_reply": "2024-06-23T03:15:27.893208Z"
    },
    "papermill": {
     "duration": 0.198818,
     "end_time": "2024-06-23T03:15:27.897582",
     "exception": false,
     "start_time": "2024-06-23T03:15:27.698764",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Convert date columns to datetime\n",
    "historical_weather['date'] = pd.to_datetime(historical_weather['date'])\n",
    "submission_key['date'] = pd.to_datetime(submission_key['date'])\n",
    "\n",
    "# Extract additional features from the date\n",
    "historical_weather['year'] = historical_weather['date'].dt.year\n",
    "historical_weather['month'] = historical_weather['date'].dt.month\n",
    "historical_weather['day'] = historical_weather['date'].dt.day\n",
    "historical_weather['dayofyear'] = historical_weather['date'].dt.dayofyear\n",
    "\n",
    "# Aggregate data by city and day of the year to capture seasonal trends\n",
    "agg_funcs = {\n",
    "    'avg_temp_c': ['mean'],\n",
    "    'min_temp_c': ['mean'],\n",
    "    'max_temp_c': ['mean'],\n",
    "    'precipitation_mm': ['mean'],\n",
    "    'snow_depth_mm': ['mean'],\n",
    "    'avg_wind_dir_deg': ['mean'],\n",
    "    'avg_wind_speed_kmh': ['mean']\n",
    "}\n",
    "\n",
    "aggregated_weather = historical_weather.groupby(['city_id', 'dayofyear']).agg(agg_funcs)\n",
    "aggregated_weather.columns = ['_'.join(col) for col in aggregated_weather.columns]\n",
    "\n",
    "# Merge the aggregated data with the submission key\n",
    "submission_key['dayofyear'] = submission_key['date'].dt.dayofyear\n",
    "merged_data = submission_key.merge(aggregated_weather, on=['city_id', 'dayofyear'], how='left')\n",
    "\n",
    "# One-hot encode the city_id column\n",
    "merged_data = pd.get_dummies(merged_data, columns=['city_id'])\n",
    "\n",
    "# Impute missing values with the mean\n",
    "merged_data.fillna(merged_data.mean(), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "929e83ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T03:15:27.904294Z",
     "iopub.status.busy": "2024-06-23T03:15:27.903895Z",
     "iopub.status.idle": "2024-06-23T03:16:02.108093Z",
     "shell.execute_reply": "2024-06-23T03:16:02.106770Z"
    },
    "papermill": {
     "duration": 34.21172,
     "end_time": "2024-06-23T03:16:02.111755",
     "exception": false,
     "start_time": "2024-06-23T03:15:27.900035",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation RMSE: 0.5121148272195016\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import numpy as np\n",
    "\n",
    "# Prepare the training data\n",
    "train_data = historical_weather.copy()\n",
    "train_data['dayofyear'] = train_data['date'].dt.dayofyear\n",
    "\n",
    "# Aggregate the historical data\n",
    "aggregated_train = train_data.groupby(['city_id', 'dayofyear']).agg(agg_funcs)\n",
    "aggregated_train.columns = ['_'.join(col) for col in aggregated_train.columns]\n",
    "\n",
    "# One-hot encode the city_id column in the training data\n",
    "aggregated_train = pd.get_dummies(aggregated_train.reset_index(), columns=['city_id'])\n",
    "\n",
    "# Impute missing values with the mean\n",
    "aggregated_train.fillna(aggregated_train.mean(), inplace=True)\n",
    "\n",
    "# Prepare features and target variable\n",
    "X = aggregated_train.drop(columns=['avg_temp_c_mean'])\n",
    "y = aggregated_train['avg_temp_c_mean'].values\n",
    "\n",
    "# Split the data into training and validation sets\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train a Random Forest model\n",
    "rf_model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "rf_model.fit(X_train, y_train)\n",
    "\n",
    "# Validate the model\n",
    "y_pred = rf_model.predict(X_val)\n",
    "rmse = np.sqrt(mean_squared_error(y_val,y_pred))\n",
    "print(f'Validation RMSE: {rmse}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d9de98c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T03:16:02.118040Z",
     "iopub.status.busy": "2024-06-23T03:16:02.117666Z",
     "iopub.status.idle": "2024-06-23T03:16:02.171672Z",
     "shell.execute_reply": "2024-06-23T03:16:02.170295Z"
    },
    "papermill": {
     "duration": 0.060344,
     "end_time": "2024-06-23T03:16:02.174471",
     "exception": false,
     "start_time": "2024-06-23T03:16:02.114127",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Ensure that the test data has the same columns as the training data\n",
    "X_test = merged_data.drop(columns=['submission_ID', 'date', 'avg_temp_c_mean'])\n",
    "\n",
    "# Align the columns of X_test with those of X_train\n",
    "X_test = X_test.reindex(columns=X_train.columns, fill_value=0)\n",
    "\n",
    "# Predict the average temperature for the first week of 2019\n",
    "test_predictions = rf_model.predict(X_test)\n",
    "\n",
    "# Prepare the submission file\n",
    "submission = sample_submission.copy()\n",
    "submission['avg_temp_c'] = test_predictions\n",
    "submission.to_csv('submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 8892995,
     "sourceId": 81884,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 39.3672,
   "end_time": "2024-06-23T03:16:02.904915",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-23T03:15:23.537715",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
